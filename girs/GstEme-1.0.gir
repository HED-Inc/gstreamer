<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
  <include name="Gst" version="1.0"/>
  <package name="gstreamer-eme-1.0"/>
  <c:include name="gst/eme/eme.h"/>
  <namespace name="GstEme" version="1.0" shared-library="libgsteme-1.0.so.0" c:identifier-prefixes="Gst" c:symbol-prefixes="gst">
    <enumeration name="EmeMediaKeyMessageType" version="1.24" glib:type-name="GstEmeMediaKeyMessageType" glib:get-type="gst_eme_media_key_message_type_get_type" c:type="GstEmeMediaKeyMessageType">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Types of messages sent by the #GstMediaKeySession::on-message signal

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)</doc>
      <member name="license_request" value="0" c:identifier="GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_REQUEST" glib:nick="license-request">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">The session requests a new
license</doc>
      </member>
      <member name="license_renewal" value="1" c:identifier="GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RENEWAL" glib:nick="license-renewal">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">The session wants to renew
an existing license</doc>
      </member>
      <member name="license_release" value="2" c:identifier="GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RELEASE" glib:nick="license-release">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">The session wants to release
an existing license</doc>
      </member>
      <member name="individualization_request" value="3" c:identifier="GST_EME_MEDIA_KEY_MESSAGE_TYPE_INDIVIDUALIZATION_REQUEST" glib:nick="individualization-request">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">The message is
associated with the individualization process</doc>
      </member>
      <member name="unknown" value="-1" c:identifier="GST_EME_MEDIA_KEY_MESSAGE_TYPE_UNKNOWN" glib:nick="unknown">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">The message is not one of the
expected message types generated by a session</doc>
      </member>
    </enumeration>
    <enumeration name="EmeMessageType" version="1.24" glib:type-name="GstEmeMessageType" glib:get-type="gst_eme_message_type_get_type" c:type="GstEmeMessageType">
      <member name="generate_request" value="0" c:identifier="GST_EME_MESSAGE_TYPE_GENERATE_REQUEST" glib:nick="generate-request">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Used internally by implementors of
#GstMediaKeySession</doc>
      </member>
      <member name="load" value="1" c:identifier="GST_EME_MESSAGE_TYPE_LOAD" glib:nick="load">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Used internally by implementors of
#GstMediaKeySession</doc>
      </member>
      <member name="update" value="2" c:identifier="GST_EME_MESSAGE_TYPE_UPDATE" glib:nick="update">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Used internally by implementors of
#GstMediaKeySession</doc>
      </member>
      <member name="remove" value="3" c:identifier="GST_EME_MESSAGE_TYPE_REMOVE" glib:nick="remove">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Used internally by implementors of
#GstMediaKeySession</doc>
      </member>
      <member name="close" value="4" c:identifier="GST_EME_MESSAGE_TYPE_CLOSE" glib:nick="close">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">Used internally by implementors of
#GstMediaKeySession</doc>
      </member>
      <member name="eme_encrypted" value="5" c:identifier="GST_EME_MESSAGE_TYPE_EME_ENCRYPTED" glib:nick="eme-encrypted">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">This message will be sent by a decryptor
element when it encounters initialization data inside encrypted media.
Applications should react to this message by setting up a
@GstMediaKeySystemAccess, @GstMediaKeys, and @GstMediaKeySession if this
hasn't been performed yet for the supplied initialization data.</doc>
      </member>
      <member name="unknown" value="-1" c:identifier="GST_EME_MESSAGE_TYPE_UNKNOWN" glib:nick="unknown">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h">This message is not a valid message used by
the GST EME API.</doc>
      </member>
    </enumeration>
    <interface name="MediaKeySession" c:symbol-prefix="media_key_session" c:type="GstMediaKeySession" version="1.24" glib:type-name="GstMediaKeySession" glib:get-type="gst_media_key_session_get_type" glib:type-struct="MediaKeySessionInterface">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession is an interface which groups a set of keys that are
relevant to a specific unit of Initialization Data. Every time an application
encounters new Initialization Data, it should request that a new session is
created which will be used to manage the keys necessary to work with the
associated media.

[Specification](https://www.w3.org/TR/encrypted-media/#mediakeysession-interface)</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
      <virtual-method name="close" invoker="close" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to close the session when the application doesn't need it
anymore. This is an asynchronous operation and all temporary resources held
by the session should be freed when @promise is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-close)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="generate_request" invoker="generate_request" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Generates a license request based on the supplied Initialization Data. This
is an asynchronous operation and the supplied @promise will contain the
license request generated by the CDM when it is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-generaterequest)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="init_data_type" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string identifying the format of @init_data. Typical values
include `cenc`, `keyids`, and `webm`.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="init_data" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing the raw initialization
data to be used by the underlying CDM to create a license request</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with a license
request on success or an error on failure</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_closed" invoker="get_closed" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Query whether this session's state is closed. This is an asynchronous
operation and the answer will be returned in the supplied @promise.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-closed)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with the closed
state of this session</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expiration" invoker="get_expiration" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Get the expiration time of all keys contained by this session.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-expiration)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a #GstClockTime containing the expiration time of this session
or %GST_CLOCK_TIME_NONE if there's no expiration time</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_key_status" invoker="get_media_key_status" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Gets the #GstMediaKeyStatus of @key_id within the current session

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeystatusmap-get)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The #GstMediaKeyStatus for the supplied Key ID</doc>
          <type name="MediaKeyStatus" c:type="GstMediaKeyStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which
is being queried</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_key_status_count" invoker="get_media_key_status_count" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Gets the number of keys contained by the current session</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The number of keys that this session contains</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_session_id" invoker="get_session_id" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Get the identifier of the current session.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-sessionid)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a text string containing the current
session ID or `NULL` if it hasn't been set yet</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_media_key_status" invoker="has_media_key_status" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Answers whether the current session has any record of @key_id.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeystatusmap-has)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">`TRUE` if current session has any record of @key_id, otherwise `FALSE`</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which is being
queried</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to load data into this session from persistent storage.</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string representing the Session ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove" invoker="remove" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to remove all credentials held by this session. This is an
asynchronous operation and all persistent data stored by the CDM for this
session should be removed when @promise is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-remove)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to supply a message sent by the license authority to the
underlying CDM. Typically this will be used to populate this session with
decryption keys that were previously requested. This is an asynchronous
operation and the underlying CDM will have processed the update when @promise
is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-update)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing raw data of a license authority's response
to a license request</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="gst_media_key_session_close" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to close the session when the application doesn't need it
anymore. This is an asynchronous operation and all temporary resources held
by the session should be freed when @promise is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-close)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_request" c:identifier="gst_media_key_session_generate_request" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Generates a license request based on the supplied Initialization Data. This
is an asynchronous operation and the supplied @promise will contain the
license request generated by the CDM when it is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-generaterequest)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="init_data_type" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string identifying the format of @init_data. Typical values
include `cenc`, `keyids`, and `webm`.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="init_data" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing the raw initialization
data to be used by the underlying CDM to create a license request</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with a license
request on success or an error on failure</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_closed" c:identifier="gst_media_key_session_get_closed" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Query whether this session's state is closed. This is an asynchronous
operation and the answer will be returned in the supplied @promise.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-closed)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with the closed
state of this session</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_expiration" c:identifier="gst_media_key_session_get_expiration" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Get the expiration time of all keys contained by this session.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-expiration)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a #GstClockTime containing the expiration time of this session
or %GST_CLOCK_TIME_NONE if there's no expiration time</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_key_status" c:identifier="gst_media_key_session_get_media_key_status" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Gets the #GstMediaKeyStatus of @key_id within the current session

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeystatusmap-get)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The #GstMediaKeyStatus for the supplied Key ID</doc>
          <type name="MediaKeyStatus" c:type="GstMediaKeyStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which
is being queried</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_key_status_count" c:identifier="gst_media_key_session_get_media_key_status_count" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Gets the number of keys contained by the current session</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The number of keys that this session contains</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_id" c:identifier="gst_media_key_session_get_session_id" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Get the identifier of the current session.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-sessionid)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a text string containing the current
session ID or `NULL` if it hasn't been set yet</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_media_key_status" c:identifier="gst_media_key_session_has_media_key_status" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Answers whether the current session has any record of @key_id.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeystatusmap-has)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">`TRUE` if current session has any record of @key_id, otherwise `FALSE`</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which is being
queried</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="gst_media_key_session_load" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to load data into this session from persistent storage.</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string representing the Session ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="publish_key_statuses_change" c:identifier="gst_media_key_session_publish_key_statuses_change" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">For implementors of the #GstMediaKeySession interface, this is a helper
function to emit the signal "on-key-statuses-change"</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="publish_message" c:identifier="gst_media_key_session_publish_message" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">For implementors of the #GstMediaKeySession interface, this is a helper
function to emit the signal "on-message" with the supplied @message</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="full">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMessage which will be passed to the
application</doc>
            <type name="Gst.Message" c:type="GstMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gst_media_key_session_remove" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to remove all credentials held by this session. This is an
asynchronous operation and all persistent data stored by the CDM for this
session should be removed when @promise is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-remove)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gst_media_key_session_update" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Attempts to supply a message sent by the license authority to the
underlying CDM. Typically this will be used to populate this session with
decryption keys that were previously requested. This is an asynchronous
operation and the underlying CDM will have processed the update when @promise
is resolved successfully.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-update)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing raw data of a license authority's response
to a license request</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="on-key-statuses-change" when="last" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Emitted when the status of any key contained in @self changes.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-onkeystatuseschange)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="on-message" when="last" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">Emitted when @self wishes to send some information to the license
authority. The application should listen to this event and forward
messages to the license authority as appropriate.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysession-onmessage)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMessage instance</doc>
            <type name="Gst.Message"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MediaKeySessionInterface" c:type="GstMediaKeySessionInterface" glib:is-gtype-struct-for="MediaKeySession" version="1.24">
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_session_id">
        <callback name="get_session_id">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a text string containing the current
session ID or `NULL` if it hasn't been set yet</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expiration">
        <callback name="get_expiration">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">a #GstClockTime containing the expiration time of this session
or %GST_CLOCK_TIME_NONE if there's no expiration time</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_closed">
        <callback name="get_closed">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with the closed
state of this session</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_media_key_status">
        <callback name="has_media_key_status">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">`TRUE` if current session has any record of @key_id, otherwise `FALSE`</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="key_id" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which is being
queried</doc>
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_key_status">
        <callback name="get_media_key_status">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The #GstMediaKeyStatus for the supplied Key ID</doc>
            <type name="MediaKeyStatus" c:type="GstMediaKeyStatus"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="key_id" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer raw data representing the Key ID which
is being queried</doc>
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_key_status_count">
        <callback name="get_media_key_status_count">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">The number of keys that this session contains</doc>
            <type name="gsize" c:type="gsize"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate_request">
        <callback name="generate_request">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="init_data_type" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string identifying the format of @init_data. Typical values
include `cenc`, `keyids`, and `webm`.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="init_data" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing the raw initialization
data to be used by the underlying CDM to create a license request</doc>
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered with a license
request on success or an error on failure</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="session_id" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">string representing the Session ID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update">
        <callback name="update">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="response" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstBuffer containing raw data of a license authority's response
to a license request</doc>
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the operation either
succeeds or fails</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstMediaKeySession instance</doc>
              <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.c">#GstPromise which will be answered when the
operation either succeeds or fails</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MediaKeySessionType" version="1.24" glib:type-name="GstMediaKeySessionType" glib:get-type="gst_media_key_session_type_get_type" c:type="GstMediaKeySessionType">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h">[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysessiontype)</doc>
      <member name="temporary" value="0" c:identifier="GST_MEDIA_KEY_SESSION_TYPE_TEMPORARY" glib:nick="temporary">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h">Data associated with this type of
session will not be stored in persistent storage</doc>
      </member>
      <member name="persistent_license" value="1" c:identifier="GST_MEDIA_KEY_SESSION_TYPE_PERSISTENT_LICENSE" glib:nick="persistent-license">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h">Data associated with this
type of session may be stored in persistent storage and loaded from that
storage.</doc>
      </member>
    </enumeration>
    <enumeration name="MediaKeyStatus" version="1.24" glib:type-name="GstMediaKeyStatus" glib:get-type="gst_media_key_status_get_type" c:type="GstMediaKeyStatus">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeystatus)</doc>
      <member name="usable" value="0" c:identifier="GST_MEDIA_KEY_STATUS_USABLE" glib:nick="usable">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">A key with this status can be used to
decrypt media</doc>
      </member>
      <member name="expired" value="1" c:identifier="GST_MEDIA_KEY_STATUS_EXPIRED" glib:nick="expired">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">A key with this status has passed its
expiration time and is no longer usable</doc>
      </member>
      <member name="released" value="2" c:identifier="GST_MEDIA_KEY_STATUS_RELEASED" glib:nick="released">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">A key with this status is known to the CDM
but it's not usable to decrypt media</doc>
      </member>
      <member name="output_restricted" value="3" c:identifier="GST_MEDIA_KEY_STATUS_OUTPUT_RESTRICTED" glib:nick="output-restricted">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">This key can't be used to output
media with the current system configuration</doc>
      </member>
      <member name="output_downscaled" value="4" c:identifier="GST_MEDIA_KEY_STATUS_OUTPUT_DOWNSCALED" glib:nick="output-downscaled">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">This key can only be used to
decrypt a reduced quality version of the media</doc>
      </member>
      <member name="status_pending" value="5" c:identifier="GST_MEDIA_KEY_STATUS_STATUS_PENDING" glib:nick="status-pending">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">The status of this key is not known</doc>
      </member>
      <member name="internal_error" value="6" c:identifier="GST_MEDIA_KEY_STATUS_INTERNAL_ERROR" glib:nick="internal-error">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysession.h">The CDM encountered an error with
this key</doc>
      </member>
    </enumeration>
    <interface name="MediaKeySystemAccess" c:symbol-prefix="media_key_system_access" c:type="GstMediaKeySystemAccess" version="1.24" glib:type-name="GstMediaKeySystemAccess" glib:get-type="gst_media_key_system_access_get_type" glib:type-struct="MediaKeySystemAccessInterface">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess is an interface which provides access to a
#GstMediaKeys instance.

[Specification](https://www.w3.org/TR/encrypted-media/#mediakeysystemaccess-interface)</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
      <virtual-method name="create_media_keys" invoker="create_media_keys" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Attempt to create a #GstMediaKeys instance. This is an asynchronous operation
and the response will eventually be placed in in the supplied #GstPromise

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-createmediakeys)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstPromise which will be answered when the
#GstMediaKeys is successfully created or fails to be created</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_configuration" invoker="get_configuration" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Get the configuration for the requested instance.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-getconfiguration)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A new #GstCaps object representing the
configuration options supplied by the application when it created this
instance.</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_key_system" invoker="get_key_system" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Get the Key System ID for for the requested instance.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-keysystem)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A string containing the identifier of the key
system supported by this instance.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create_media_keys" c:identifier="gst_media_key_system_access_create_media_keys" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Attempt to create a #GstMediaKeys instance. This is an asynchronous operation
and the response will eventually be placed in in the supplied #GstPromise

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-createmediakeys)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstPromise which will be answered when the
#GstMediaKeys is successfully created or fails to be created</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_configuration" c:identifier="gst_media_key_system_access_get_configuration" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Get the configuration for the requested instance.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-getconfiguration)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A new #GstCaps object representing the
configuration options supplied by the application when it created this
instance.</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key_system" c:identifier="gst_media_key_system_access_get_key_system" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">Get the Key System ID for for the requested instance.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeysystemaccess-keysystem)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A string containing the identifier of the key
system supported by this instance.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
            <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="MediaKeySystemAccessInterface" c:type="GstMediaKeySystemAccessInterface" glib:is-gtype-struct-for="MediaKeySystemAccess" version="1.24">
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
      <field name="g_iface" readable="0" private="1">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h">base interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_key_system">
        <callback name="get_key_system">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A string containing the identifier of the key
system supported by this instance.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
              <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">A new #GstCaps object representing the
configuration options supplied by the application when it created this
instance.</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
              <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_media_keys">
        <callback name="create_media_keys">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstMediaKeySystemAccess instance</doc>
              <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeysystemaccess.c">#GstPromise which will be answered when the
#GstMediaKeys is successfully created or fails to be created</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="MediaKeys" c:symbol-prefix="media_keys" c:type="GstMediaKeys" version="1.24" glib:type-name="GstMediaKeys" glib:get-type="gst_media_keys_get_type" glib:type-struct="MediaKeysInterface">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys is an interface which maps to an instance of an underlying
Content Decryption Module (CDM). It maintains a set of #GstMediaKeySession
children which can be used to decrypt specific groups of content.

[Specification](https://www.w3.org/TR/encrypted-media/#mediakeys-interface)</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
      <virtual-method name="create_session" invoker="create_session" version="1.24" throws="1">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">Attempts to create a new session for the given session type.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeys-createsession)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">a new, empty #GstMediaKeySession not yet
associated with any Initialization Data on success, otherwise `NULL`</doc>
          <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
            <type name="MediaKeys" c:type="GstMediaKeys*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeySessionType the type of session to create</doc>
            <type name="MediaKeySessionType" c:type="GstMediaKeySessionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_server_certificate" invoker="set_server_certificate" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">Attempts to supply a server certificate to the underlying CDM. The CDM can
use this certificate to encrypt messages intended to be sent to a server
acting as the license authority.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeys-setservercertificate)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
            <type name="MediaKeys" c:type="GstMediaKeys*"/>
          </instance-parameter>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstBuffer containing the server certificate
data</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstPromise which will be answered either
successfully or unsuccessfully based on the underlying CDM's behavior</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_session" c:identifier="gst_media_keys_create_session" version="1.24" throws="1">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">Attempts to create a new session for the given session type.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeys-createsession)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">a new, empty #GstMediaKeySession not yet
associated with any Initialization Data on success, otherwise `NULL`</doc>
          <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
            <type name="MediaKeys" c:type="GstMediaKeys*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeySessionType the type of session to create</doc>
            <type name="MediaKeySessionType" c:type="GstMediaKeySessionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_server_certificate" c:identifier="gst_media_keys_set_server_certificate" version="1.24">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">Attempts to supply a server certificate to the underlying CDM. The CDM can
use this certificate to encrypt messages intended to be sent to a server
acting as the license authority.

[Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeys-setservercertificate)</doc>
        <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
            <type name="MediaKeys" c:type="GstMediaKeys*"/>
          </instance-parameter>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstBuffer containing the server certificate
data</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="promise" transfer-ownership="none">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstPromise which will be answered either
successfully or unsuccessfully based on the underlying CDM's behavior</doc>
            <type name="Gst.Promise" c:type="GstPromise*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="MediaKeysInterface" c:type="GstMediaKeysInterface" glib:is-gtype-struct-for="MediaKeys" version="1.24">
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
      <field name="g_iface">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h">base interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_session">
        <callback name="create_session" throws="1">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">a new, empty #GstMediaKeySession not yet
associated with any Initialization Data on success, otherwise `NULL`</doc>
            <type name="MediaKeySession" c:type="GstMediaKeySession*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
              <type name="MediaKeys" c:type="GstMediaKeys*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeySessionType the type of session to create</doc>
              <type name="MediaKeySessionType" c:type="GstMediaKeySessionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_server_certificate">
        <callback name="set_server_certificate">
          <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.h"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstMediaKeys instance</doc>
              <type name="MediaKeys" c:type="GstMediaKeys*"/>
            </parameter>
            <parameter name="certificate" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstBuffer containing the server certificate
data</doc>
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
            <parameter name="promise" transfer-ownership="none">
              <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstmediakeys.c">#GstPromise which will be answered either
successfully or unsuccessfully based on the underlying CDM's behavior</doc>
              <type name="Gst.Promise" c:type="GstPromise*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function name="eme_context_get_media_keys" c:identifier="gst_eme_context_get_media_keys" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to extract a #GstMediaKeys instance into @media_keys from @context.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` when successful, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">#GstContext to inspect</doc>
          <type name="Gst.Context" c:type="GstContext*"/>
        </parameter>
        <parameter name="media_keys" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">#GstMediaKeys to retrieve</doc>
          <type name="MediaKeys" c:type="GstMediaKeys**"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_context_new_media_keys" c:identifier="gst_eme_context_new_media_keys" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstContext containing an appropriate response for
%GST_EME_MESSAGE_TYPE_EME_ENCRYPTED messages sent by an element in the
pipeline when it encounters protected media. The application should place
this context in the message source's element using #gst_element_set_context.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstContext</doc>
        <type name="Gst.Context" c:type="GstContext*"/>
      </return-value>
      <parameters>
        <parameter name="media_keys" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">#GstMediaKeys instance to insert into context</doc>
          <type name="MediaKeys" c:type="GstMediaKeys*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_context_new_protection_system_id" c:identifier="gst_eme_context_new_protection_system_id" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstContext containing an appropriate response for
%GST_MESSAGE_NEED_CONTEXT messages sent by an element in the pipeline when it
encounters protected media. The application should place this context in the
message source's element using #gst_element_set_context.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstContext</doc>
        <type name="Gst.Context" c:type="GstContext*"/>
      </return-value>
      <parameters>
        <parameter name="uuid" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">UUID of the application's preferred protection system</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_media_key_message_get_type" c:identifier="gst_eme_media_key_message_get_type" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Determines the #GstEmeMediaKeyMessageType of @message</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">#GstEmeMediaKeyMessageType or
%GST_EME_MEDIA_KEY_MESSAGE_TYPE_UNKNOWN when it cannot be determined</doc>
        <type name="EmeMediaKeyMessageType" c:type="GstEmeMediaKeyMessageType"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by #GstMediaKeySession::on-message</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_message_get_type" c:identifier="gst_eme_message_get_type" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Determines the #GstEmeMessageType of @message</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">#GstEmeMessageType or %GST_EME_MESSAGE_TYPE_UNKNOWN when it cannot
be determined</doc>
        <type name="EmeMessageType" c:type="GstEmeMessageType"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage created by the GStreamer EME API</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_parse_dash_content_protection_block" c:identifier="gst_eme_parse_dash_content_protection_block" version="1.24">
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing a DASH
`&lt;ContentProtection&gt;` block</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="scheme_uuid" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The UUID of the
protection scheme found in the block</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="license_acquisition_urls" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The license
acquisition server URLs (`&lt;dashif:laurl&gt;` elements) contained in the block in
order of appearance.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
        <parameter name="authorization_urls" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The authorization
server URLs (`&lt;dashif:authzurl&gt;` elements) contained in the block in order of
appearance.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
        <parameter name="init_data" direction="out" caller-allocates="0" transfer-ownership="full" nullable="1" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The initialization
data found in the block's `&lt;cenc:pssh&gt;` element.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_parse_dash_protection_message" c:identifier="gst_eme_parse_dash_protection_message" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to extract the license acquisition and authorization server
URLs from a DASH manifest's `&lt;ContentProtection&gt;` block.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The #GstMessage containing DASH initialization data</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="license_acquisition_urls" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The license
acquisition server URLs (`&lt;dashif:laurl&gt;` elements) contained in the block in
order of appearance.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
        <parameter name="authorization_urls" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The authorization
server URLs (`&lt;dashif:authzurl&gt;` elements) contained in the block in order of
appearance.</doc>
          <type name="utf8" c:type="gchar***"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_resolve_init_data" c:identifier="gst_eme_resolve_init_data" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to extract a #GstBuffer of initialization data from a #GstPromise
that was supplied to #gst_media_key_session_generate_request().</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the initialization data or `NULL`</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the #GstPromise, which must already be in the
%GST_PROMISE_RESULT_REPLIED state.</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_resolve_media_keys" c:identifier="gst_eme_resolve_media_keys" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to extract a #GstMediaKeys from a #GstPromise that was
supplied to #gst_media_key_system_access_create_media_keys().</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the #GstMediaKeys object or `NULL`</doc>
        <type name="MediaKeys" c:type="GstMediaKeys*"/>
      </return-value>
      <parameters>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the #GstPromise, which must already be in the
%GST_PROMISE_RESULT_REPLIED state.</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_resolve_system_access" c:identifier="gst_eme_resolve_system_access" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to extract a #GstMediaKeySystemAccess from a #GstPromise that was
supplied to the ::request-media-key-system-access action signal of a
"Protection System" pseudo-element.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the #GstMediaKeySystemAccess object or `NULL`</doc>
        <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
      </return-value>
      <parameters>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">the #GstPromise, which must already be in the
%GST_PROMISE_RESULT_REPLIED state.</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_response_init_data" c:identifier="gst_eme_response_init_data" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for a successful response to the method
#gst_media_key_session_generate_request() by any implementor of
#GstMediaKeySession.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
      <parameters>
        <parameter name="init_data" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing initialization data</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_response_invalid_state_error" c:identifier="gst_eme_response_invalid_state_error" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for signalling an error to a
#GstPromise that is analogous to an InvalidStateError in the DOM
specification.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
    </function>
    <function name="eme_response_media_keys" c:identifier="gst_eme_response_media_keys" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for a successful response to the method
#gst_media_key_system_access_create_media_keys() by any implementor of
#GstMediaKeySystemAccess.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
      <parameters>
        <parameter name="keys" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The #GstMediaKeys instance to include in the response</doc>
          <type name="MediaKeys" c:type="GstMediaKeys*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_response_ok" c:identifier="gst_eme_response_ok" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for signalling a successful result to a
#GstPromise.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
    </function>
    <function name="eme_response_system_access" c:identifier="gst_eme_response_system_access" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for a successful response to the action
signal ::request-media-key-system-access handled by any implementor of a
"Protection System" pseudo-element.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
      <parameters>
        <parameter name="system_access" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The #GstMediaKeySystemAccess instance to
include in the response</doc>
          <type name="MediaKeySystemAccess" c:type="GstMediaKeySystemAccess*"/>
        </parameter>
      </parameters>
    </function>
    <function name="eme_response_type_error" c:identifier="gst_eme_response_type_error" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a #GstStructure suitable for signalling an error to a
#GstPromise that is analogous to a TypeError in the DOM specification.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">a new #GstStructure</doc>
        <type name="Gst.Structure" c:type="GstStructure*"/>
      </return-value>
    </function>
    <docsection name="gstemeutils">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Various helper functions that applications working with the GST EME library
as well as implementors of the GST EME interfaces can use to simplify the
authoring and processing of custom data stored in #GstStructure&lt;!----&gt;s
contained in #GstMessage and #GstPromise objects.</doc>
    </docsection>
    <function name="message_new_eme_close" c:identifier="gst_message_new_eme_close" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
an internal #GstMessage that the session can process asynchronously to answer</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise supplied to
#gst_media_key_session_generate_request</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_encrypted" c:identifier="gst_message_new_eme_encrypted" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstMessage containing a structure suitable for the
"eme-encrypted" event sent by a decryptor element.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage describing the intiailization
data encountered</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The element that encountered encrypted
media or `NULL`</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="init_data_type" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The kind of initialization data encountered
by the decryptor element</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="init_data" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing the initialization data</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_encrypted_full" c:identifier="gst_message_new_eme_encrypted_full" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstMessage containing a structure suitable for the
"eme-encrypted" event sent by a decryptor element.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage describing the intiailization
data encountered</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The element that encountered encrypted
media or `NULL`</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </parameter>
        <parameter name="init_data_type" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The kind of initialization data encountered
by the decryptor element</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="init_data" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing the initialization data
which may have been pre-processed by the decryptor element.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="init_data_origin" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Identifies the initialization
data was extracted. It is common for either the container such as MP4 or WebM
to produce this information as well as a DASH manifest.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="raw_init_data" transfer-ownership="full" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The initialization data as seen
by the element that discovered it, without any pre-processing applied.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_generate_request" c:identifier="gst_message_new_eme_generate_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
an internal #GstMessage that the session can process asynchronously to answer</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="init_data_type" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A string supplied to
#gst_media_key_session_generate_request containing the type of initialization
data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="init_data" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer supplied to
#gst_media_key_session_generate_request containing the initialization data</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise supplied to
#gst_media_key_session_generate_request</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_have_key" c:identifier="gst_message_new_eme_have_key" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstMessage that a Decryptor element can send to the
application, indicating that it now has access to @key_id. The application is
not required to handle this message.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage describing which key is available</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The decryptor element that has a key or
`NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="key_id" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The key that is now available to the decryptor</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_individualization_request" c:identifier="gst_message_new_eme_individualization_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
a #GstMessage that the session will send to the application when the
underlying CDM generates an individualization request</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="payload" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing an
individualization request generated by the CDM</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_license_release" c:identifier="gst_message_new_eme_license_release" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
a #GstMessage that the session will send to the application so it can persist
this record.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="payload" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing data generated
by the CDM indicating that a persistent license has been destroyed</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_license_renewal" c:identifier="gst_message_new_eme_license_renewal" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
a #GstMessage that the session will send to the application for the purpose
of requesting license renewal from a license authority.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="payload" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing data generated
by the CDM which must be sent to the license authority to renew a license</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_license_request" c:identifier="gst_message_new_eme_license_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
a #GstMessage that the session will send to the application for the purpose
of requesting a new license from the license authority.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="payload" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer containing data generated
by the CDM which must be sent to the license authority to request a license</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_load" c:identifier="gst_message_new_eme_load" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
an internal #GstMessage that the session can process asynchronously to answer</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="session_id" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The session ID supplied to
#gst_media_key_session_load</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise supplied to
#gst_media_key_session_load</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_remove" c:identifier="gst_message_new_eme_remove" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
an internal #GstMessage that the session can process asynchronously to answer</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message, typically the
#GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise supplied by the application to
#gst_media_key_session_generate_request</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_update" c:identifier="gst_message_new_eme_update" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">For implementors of the GST EME API, this function simplifies the creation of
an internal #GstMessage that the session can process asynchronously to answer</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage containing the supplied
parameters</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The sender of the message,
typically the #GstMediaKeySession generating this message or `NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="response" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstBuffer supplied to
#gst_media_key_session_update containing the license authority's response</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise supplied to
#gst_media_key_session_update</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_new_eme_waiting_for_key" c:identifier="gst_message_new_eme_waiting_for_key" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Creates a new #GstMessage that a Decryptor element can send to the
application, indicating that it needs a specific key to decrypt the stream.
The application must answer the promise in the message.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A new #GstMessage describing which key is needed</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The decryptor element that needs a key or
`NULL`</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="key_id" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The key that is needed to decrypt upcoming media</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="promise" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise that must be answered by the
application when the key should be available to the decryptor</doc>
          <type name="Gst.Promise" c:type="GstPromise*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_close" c:identifier="gst_message_parse_eme_close" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to itself when
asynchronously processing a request triggered by #gst_media_key_session_close</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to
itself</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The promise supplied by the application that
must be answered by the session or `NULL` on failure</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_encrypted" c:identifier="gst_message_parse_eme_encrypted" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse @message sent by a decryptor element, extracting
@init_data_type and @init_data.

The application should create a new #GstMediaKeySession and then call
#gst_media_key_session_generate_request() on it with these parameters to
begin a typical EME setup workflow.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The message to parse</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="init_data_type" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The type of initialization
data</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="init_data" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The initialization data</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_generate_request" c:identifier="gst_message_parse_eme_generate_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to itself when
asynchronously processing a request triggered by
#gst_media_key_session_generate_request</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to
itself</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="init_data_type" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The type of Initialization Data as a
string value or `NULL` on failure</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="init_data" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The Initialization Data as raw bytes or
`NULL` on failure</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The promise supplied by the application that
must be answered by the session or `NULL` on failure</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_have_key" c:identifier="gst_message_parse_eme_have_key" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse @message, extracting @key_id. No action is required from
the application when it receives this message.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The message to parse</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="key_id" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The key that is needed to decrypt upcoming media</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_individualization_request" c:identifier="gst_message_parse_eme_individualization_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to the
application when the underlying CDM has generated an individualization
request</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to the
application</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="payload" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The individualization request generated by
the CDM or `NULL` on failure</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_license_release" c:identifier="gst_message_parse_eme_license_release" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to the
application when the underlying CDM has destroyed a persistent license</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to the
application</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="payload" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The record of license destruction generated
by the CDM or `NULL` on failure</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_license_renewal" c:identifier="gst_message_parse_eme_license_renewal" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to the
application when the underlying CDM needs to renew a license to decrypt
protected media</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to the
application</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="payload" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The license renewal message generated by the
CDM or `NULL` on failure</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_license_request" c:identifier="gst_message_parse_eme_license_request" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to the
application when the underlying CDM needs a license to decrypt protected
media</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to the
application</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="payload" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The license request message generated by the
CDM or `NULL` on failure</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_load" c:identifier="gst_message_parse_eme_load" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to itself when
asynchronously processing a request triggered by
#gst_media_key_session_load</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to
itself</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="session_id" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The session ID as a string value or `NULL`
on failure</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The promise supplied by the application that
must be answered by the session or `NULL` on failure</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_remove" c:identifier="gst_message_parse_eme_remove" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to itself when
asynchronously processing a request triggered by
#gst_media_key_session_remove</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to
itself</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The promise supplied by the application that
must be answered by the session or `NULL` on failure</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_update" c:identifier="gst_message_parse_eme_update" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse a #GstMessage sent by a #GstMediaKeySession to itself when
asynchronously processing a request triggered by
#gst_media_key_session_update</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstMessage sent by a #GstMediaKeySession to
itself
@response (out) (transfer full): A #GstBuffer containing the response
supplied by the application</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="response" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The promise supplied by the application that
must be answered by the session or `NULL` on failure</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_parse_eme_waiting_for_key" c:identifier="gst_message_parse_eme_waiting_for_key" version="1.24">
      <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">Attempts to parse @message, extracting @key_id and @promise.
When @key_id is available to the application, it should answer @promise with
a successful response. If @key_id will never be available, it should expire
the promise.</doc>
      <source-position filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.h"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">`TRUE` on success, `FALSE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The message to parse</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="key_id" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">The key that is needed to decrypt upcoming media</doc>
          <type name="Gst.Buffer" c:type="GstBuffer**"/>
        </parameter>
        <parameter name="promise" direction="out" caller-allocates="0" transfer-ownership="full">
          <doc xml:space="preserve" filename="../subprojects/gst-plugins-bad/gst-libs/gst/eme/gstemeutils.c">A #GstPromise that must be answered by the
application when the key is available to the decryptor</doc>
          <type name="Gst.Promise" c:type="GstPromise**"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
